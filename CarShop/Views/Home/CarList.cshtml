@model IEnumerable<CarShop.Models.Car>
@{
    IEnumerable<Category> categories = ViewBag.Categories;
}
<style>
    header h2 {
        font-size: 24px;
        font-weight: 600;
    }

    header p {
        margin-top: 5px;
        font-size: 16px;
    }

    .price-input {
        width: 100%;
        display: flex;
        margin: 30px 0 35px;
    }

        .price-input .field {
            display: flex;
            width: 100%;
            height: 45px;
            align-items: center;
        }

    .field input {
        width: 100%;
        height: 100%;
        outline: none;
        font-size: 19px;
        margin-left: 12px;
        border-radius: 5px;
        text-align: center;
        border: 1px solid #999;
        -moz-appearance: textfield;
    }

    input[type="number"]::-webkit-outer-spin-button,
    input[type="number"]::-webkit-inner-spin-button {
        -webkit-appearance: none;
    }

    .price-input .separator {
        width: 130px;
        display: flex;
        font-size: 19px;
        align-items: center;
        justify-content: center;
    }

    .slider {
        height: 5px;
        position: relative;
        background: #ddd;
        border-radius: 5px;
    }

        .slider .progress {
            height: 100%;
            left: 25%;
            right: 25%;
            position: absolute;
            border-radius: 5px;
            background: #17A2B8;
        }

    .range-input {
        position: relative;
    }

        .range-input input {
            position: absolute;
            width: 100%;
            height: 5px;
            top: -5px;
            background: none;
            pointer-events: none;
            -webkit-appearance: none;
            -moz-appearance: none;
        }

    input[type="range"]::-webkit-slider-thumb {
        height: 17px;
        width: 17px;
        border-radius: 50%;
        background: #17A2B8;
        pointer-events: auto;
        -webkit-appearance: none;
        box-shadow: 0 0 6px rgba(0,0,0,0.05);
    }
</style>

<section class="row">
    <div class="carFilter-wrapper col-12">
        <div id="carFilter" class="bg-dark row">
            <div class="price-wrapper col-sm-12 col-md-4 mb-5">
                <header>
                    <h2>Price Range</h2>
                </header>
                <div class="price-input">
                    <div class="field">
                        <span>Min</span>
                        <input type="number" class="input-min bg-secondary" value="25000">
                    </div>
                    <div class="separator">-</div>
                    <div class="field">
                        <span>Max</span>
                        <input type="number" class="input-max bg-secondary" value="75000">
                    </div>
                </div>
                <div class="slider">
                    <div class="progress"></div>
                </div>
                <div class="range-input">
                    <input type="range" class="range-min" min="0" max="100000" value="25000" step="100">
                    <input type="range" class="range-max" min="0" max="100000" value="75000" step="100">
                </div>
            </div>
            <div class="accordion accordion-flush bg-dark col-sm-12 col-md-4 mb-5" id="accordionFlushExample">
                <div class="accordion-item bg-dark">
                    <h2 class="accordion-header bg-dark">
                        <button class="accordion-button collapsed bg-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                            Category
                        </button>
                    </h2>
                    <div id="flush-collapseOne" class="accordion-collapse collapse bg-dark" data-bs-parent="#accordionFlushExample">
                        <div class="accordion-body bg-dark">
                            @foreach (var category in categories)
                            {
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheck">
                                    <label class="form-check-label" for="flexSwitchCheck">@category.Name</label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header bg-dark">
                        <button class="accordion-button collapsed bg-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseTwo" aria-expanded="false" aria-controls="flush-collapseTwo">
                            Favourite
                        </button>
                    </h2>
                    <div id="flush-collapseTwo" class="accordion-collapse collapse bg-dark" data-bs-parent="#accordionFlushExample">
                        <div class="accordion-body bg-dark">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheck">
                                <label class="form-check-label" for="flexSwitchCheck">Only favourite cars</label>
                            </div>
                        </div>
                    </div>
                </div>                
            </div>
        </div>
    </div>
    <div class="d-flex text-center flex-wrap col-12">
        @foreach (var car in Model)
        {
            await Html.RenderPartialAsync("_CarCard", car);
        }
    </div>
</section>
<script>
    const rangeInput = document.querySelectorAll(".range-input input"),
        priceInput = document.querySelectorAll(".price-input input"),
        range = document.querySelector(".slider .progress");
    let priceGap = 1000;
    priceInput.forEach(input => {
        input.addEventListener("input", e => {
            let minPrice = parseInt(priceInput[0].value),
                maxPrice = parseInt(priceInput[1].value);

            if ((maxPrice - minPrice >= priceGap) && maxPrice <= rangeInput[1].max) {
                if (e.target.className === "input-min") {
                    rangeInput[0].value = minPrice;
                    range.style.left = ((minPrice / rangeInput[0].max) * 100) + "%";
                } else {
                    rangeInput[1].value = maxPrice;
                    range.style.right = 100 - (maxPrice / rangeInput[1].max) * 100 + "%";
                }
            }
        });
    });
    rangeInput.forEach(input => {
        input.addEventListener("input", e => {
            let minVal = parseInt(rangeInput[0].value),
                maxVal = parseInt(rangeInput[1].value);
            if ((maxVal - minVal) < priceGap) {
                if (e.target.className === "range-min") {
                    rangeInput[0].value = maxVal - priceGap
                } else {
                    rangeInput[1].value = minVal + priceGap;
                }
            } else {
                priceInput[0].value = minVal;
                priceInput[1].value = maxVal;
                range.style.left = ((minVal / rangeInput[0].max) * 100) + "%";
                range.style.right = 100 - (maxVal / rangeInput[1].max) * 100 + "%";
            }
        });
    });




    const priceRange = "100-500";
    const categories = ["sedan", "suv"];

    // Формируйте объект параметров запроса
    const queryParams = {
        priceRange: priceRange,
        category: categories.join(",") // Преобразуйте массив категорий в строку
    };

    // Преобразуйте объект параметров в строку запроса
    const queryString = new URLSearchParams(queryParams).toString();

    // Задайте URL вашего API
    const apiUrl = "https://your-api-url.com/api/cars"; // Замените на фактический URL вашего API

    // Формируйте URL с параметрами запроса
    const urlWithParams = `${apiUrl}?${queryString}`;

    // Выполните GET-запрос с использованием fetch
    fetch(urlWithParams)
        .then(response => {
            if (response.ok) {
                return response.json(); // Распарсить JSON из ответа
            } else {
                throw new Error(`Ошибка: ${response.status} - ${response.statusText}`);
            }
        })
        .then(data => {
            console.log("Ответ от сервера:", data);
        })
        .catch(error => {
            console.error("Произошла ошибка:", error);
        });
</script>